#version 460

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct KdtreeNode
{
   int Index;
   int ParentIndex;
   int LeftChildIndex;
   int RightChildIndex;
};

layout (binding = 0, std430) buffer Lists { uint lists[]; };
layout (binding = 1, std430) buffer Root { KdtreeNode root[]; };
layout (binding = 2, std430) buffer Coordinates { float coordinates[]; };
layout (binding = 3, std430) buffer Queries { float queries[]; };

layout (location = 0) uniform int NodeIndex;
layout (location = 1) uniform int QueryNum;
layout (location = 2) uniform int NeighborNum;
layout (location = 3) uniform int Size;
layout (location = 4) uniform int Dim;
const float infinity = 1.0f / 0.0f;

float push(in int list_offset, in int node_index, in float squared_distance)
{
   uint encoded_distance = floatBitsToUint( squared_distance );
   uint encoded_index = uint(node_index);
   for (int i = 0; i < NeighborNum; ++i) {
      uint max_distance = lists[list_offset + i * 2];
      uint min_distance = encoded_distance;
      uint max_index = lists[list_offset + i * 2 + 1];
      uint min_index = encoded_index;
      if (max_distance < min_distance) {
         max_distance = encoded_distance;
         min_distance = lists[list_offset + i * 2];
         max_index = encoded_index;
         min_index = lists[list_offset + i * 2 + 1];
      }
      lists[list_offset + i * 2] = min_distance;
      lists[list_offset + i * 2 + 1] = min_index;
      encoded_distance = max_distance;
      encoded_index = max_index;
   }
   return uintBitsToFloat( uint(lists[list_offset + (NeighborNum - 1) * 2]) );
}

void findNearestNeighbors(in int list_offset, in int query_offset)
{
   int depth = 0;
   int prev = -1;
   int curr = NodeIndex;
   float max_squared_distance = infinity;
   while (curr >= 0) {
      int parent = root[curr].ParentIndex;
      if (curr >= Size) {
         prev = curr;
         curr = parent;
         continue;
      }

      bool from_child = prev >= 0 && (prev == root[curr].LeftChildIndex || prev == root[curr].RightChildIndex);
      if (!from_child) {
         float squared_distance = 0.0f;
         for (int d = 0; d < Dim; ++d) {
            float x = queries[query_offset + d] - coordinates[root[curr].Index * Dim + d];
            squared_distance += x * x;
         }
         if (squared_distance <= max_squared_distance) {
            max_squared_distance = push( list_offset, curr, squared_distance );
         }
      }

      int axis = depth % Dim;
      float t = queries[query_offset + axis] - coordinates[root[curr].Index * Dim + axis];
      bool right_priority = t > 0.0f;
      int far_child = right_priority ? root[curr].LeftChildIndex : root[curr].RightChildIndex;
      int close_child = right_priority ? root[curr].RightChildIndex : root[curr].LeftChildIndex;

      int next = -1;
      if (prev >= 0 && prev == close_child) {
         if (far_child >= 0 && (t == 0.0f || t * t <= max_squared_distance)) {
            next = far_child;
            depth++;
         }
         else {
            next = parent;
            depth--;
         }
      }
       else if (prev >= 0 && prev == far_child) {
         next = parent;
         depth--;
      }
      else if (prev < 0 || prev == parent) {
         if (close_child < 0 && far_child < 0) {
            next = parent;
            depth--;
         }
         else if (close_child < 0) {
            next = far_child;
            depth++;
         }
         else {
            next = close_child;
            depth++;
         }
      }

      prev = curr;
      curr = next;
   }
}

void main()
{
   int index = int(gl_GlobalInvocationID.x);
   int step = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
   while (index < QueryNum) {
      findNearestNeighbors( index * NeighborNum * 2, index * Dim );
      index += step;
   }
}