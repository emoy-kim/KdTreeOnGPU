#version 460
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

struct KdtreeNode
{
   int Index;
   int ParentIndex;
   int LeftChildIndex;
   int RightChildIndex;
};

layout (binding = 0, std430) buffer NodeSums { int node_sums[]; };
layout (binding = 1, std430) buffer NextChild { int next_child[]; };
layout (binding = 2, std430) buffer Child { int child[]; };
layout (binding = 3, std430) buffer Root { KdtreeNode root[]; };

uniform int Size;
const int WarpSize = 32;
const int SharedSize = WarpSize * WarpSize;

shared int sums[SharedSize];

void main()
{
   int index = int(gl_GlobalInvocationID.x);
   int step = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
   int id = int(gl_LocalInvocationID.x);

   int node, count = 0;
   for (int i = index; i < Size; i += step) {
      node = child[i];
      if (node >= 0) {
         count++;
         next_child[i * 2] = root[node].LeftChildIndex;
         next_child[i * 2 + 1] = root[node].RightChildIndex;
      }
      else next_child[i * 2] = next_child[i * 2 + 1] = -1;
   }
   sums[id] = count;
   memoryBarrierShared();
   barrier();

   for (int i = int(gl_WorkGroupSize.x / 2); i > WarpSize; i >>= 1) {
      if (id < i) {
         count += sums[id + i];
         sums[id] = count;
      }
      memoryBarrierShared();
      barrier();
   }

   if (id < WarpSize) {
      if (int(gl_WorkGroupSize.x) >= WarpSize * 2) count += sums[id + WarpSize];
      count = subgroupAdd( count );
   }

   if (id == 0) node_sums[gl_WorkGroupID.x] += count;
}